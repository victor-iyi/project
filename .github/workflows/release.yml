# name: Relase

# on:
#   push:
#     tags:
#       - 'v*'

# jobs:
#   test:

#   release:
#     name: Build release
#     runs-on: ${{ matrix.os }}
#     strategy:
#       matrix:
#         os: [ubuntu-latest, macos-latest]
#         rust: stable

#     steps:
#       - name: Checkout the source code
#         uses: action/checkout@v2

#       - name: Create GITHUB_ENV
#         run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> GITHUB_ENV

#       - name: Build project release
#         uses: actions-rs/cargo@v1
#         with:
#           command: build
#           args: --release --locked

#       - name: Relase version name
#         uses: svenstaro/upload-release-action@v1-release
#         with:
#           repo_token: ${{ secrets.GITHUB_TOKEN }}
#           file: target/release/project
#           asset_name: project-${{ matrix.os }}-${{ env.RELEASE_VERSION }}
#           tag: ${{ env.RELEASE_VERSION }}
#           overwrite: true
#
# Credits: https://medium.com/faun/automate-your-build-release-with-github-actions-367c0febf5fd
name: Release CI

on:
  push:
    tags:
      - 'v*'

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Remove Old Release Drafts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          curl -H "Authorization: Bearer $GITHUB_TOKEN" https://api.github.com/repos/$GITHUB_REPOSITORY/releases \
            | tr '\r\n' ' ' \
            | jq '.[] | select(.draft == true) | .id' \
            | xargs -I '{}' \
          curl -X DELETE -H "Authorization: Bearer $GITHUB_TOKEN" https://api.github.com/repos/$GITHUB_REPOSITORY/releases/{}

  deploy:
    needs: [release]
    # A strategy is used to define various build environments this job will run.
    #
    # To say it simple, this will create 3 separate independent jobs which will
    # run on ubuntu, mac & windows.
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout source code
        uses: actions/checkout@v2

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal

      - name: Build Release
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release

      # Condition to only run this whenever the runner os is Mac
      - name: Build Release Mac
        if: matrix.os == 'macos-latest'
        run: |
          strip target/release/project
          mkdir -p release
          tar -C ./target/release/ -czvf ./release/project-mac.tar.gz ./project

      # Condition to only run this whenever the runner os is Ubuntu
      - name: Build Release Linux
        if: matrix.os == 'ubuntu-latest'
        run: |
          cargo install cargo-deb
          cargo deb
          strip target/release/project
          mkdir -p release
          mv target/debian/*.deb ./release/project-linux.deb
          tar -C ./target/release/ -czvf ./release/project-linux.tar.gz ./project

      # Condition to only run this whenever the runner os is Windows
      - name: Build Release Win
        if: matrix.os == 'windows-latest'
        run: |
          mkdir -p release
          tar -C ./target/release/ -czvf ./release/project-win.tar.gz ./project.exe

      # This will draft a new release & will attach the binaries produced by the above outputs.
      # You still need to publish this release though after job ends.
      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: true
          files: |
            ./release/*.tar.gz
            ./release/*.zip
            ./release/*.deb
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # This job send a discord notification to my private server
  notification:
    needs: [deploy]
    runs-on: ubuntu-latest
    steps:
      - name: Sending complete notifications
        env:
          DISCORD_WEBHOOK: ${{ secrets.WEBHOOK }}
        uses: Ilshidur/action-discord@master
        with:
          args: "{{ github.event.repository.full_name }} - A new release is created."

  end-success:
    name: Project Build Finished
    if: success()
    runs-on: ubuntu-latest
    needs: [deploy]

    steps:
      - name: Mark the job as successful
        run: exit 0

  end-failure:
    name: Project Build Finished
    if: "!success()"
    runs-on: ubuntu-latest
    needs: [deploy]

    steps:
      - name: Mark the job as a failure
        run: exit 1
